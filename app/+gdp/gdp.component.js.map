{"version":3,"file":"gdp.component.js","sourceRoot":"","sources":["gdp.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Control } from '@angular/common';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/combineLatest';\nimport 'rxjs/add/operator/debounceTime';\n\nimport { DataService } from '../data.service';\nimport { BarChartComponent } from '../bar-chart/bar-chart.component';\nimport { TimeSeriesData } from '../bar-chart/data';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-gdp',\n  templateUrl: 'gdp.component.html',\n  directives: [BarChartComponent]\n})\nexport class GdpComponent implements OnInit {\n\n  // all years for which data is available\n  private years:number[];\n  // user-selected filters\n  private yearFrom:Control;\n  private yearTo:Control;\n\n  // all available data\n  private data:TimeSeriesData[];\n  // data filtered by user-selected years\n  private filteredData:TimeSeriesData[];\n\n  constructor(private dataService:DataService) {\n    this.yearFrom = new Control();\n    this.yearTo = new Control();\n  }\n\n  ngOnInit() {\n    this.dataService.getGdpData()\n      .subscribe(data => {\n\n        // map source format to time series data\n        let mapped = data.map(single => {\n          let typed:TimeSeriesData = {\n            value : single[1],\n            date : new Date(single[0])\n          }\n          return typed;\n        });\n\n        // store data\n        this.data = mapped;\n\n\n        // DEBUG - we could map the data to percentual changes to the last quarter and offer this as another option...\n        // let change = this.data.map(d => d.value).map((value, index, array) => index == 0 ? 0 : value / array[index-1] - 1);\n        // console.warn(change);\n\n\n        // store all years for which we have data\n        this.years = this.data\n          .map(tsd => tsd.date.getUTCFullYear())\n          .filter((elem, pos, arr) => arr.indexOf(elem) == pos);\n\n        // ensure that from <= to in all cases\n        this.yearFrom.valueChanges.subscribe(newFrom => {\n          if (this.yearTo.value < newFrom)\n            this.yearTo.updateValue(newFrom);\n        });\n        this.yearTo.valueChanges.subscribe(newTo => {\n          if (this.yearFrom.value > newTo)\n            this.yearFrom.updateValue(newTo);\n        });\n        \n        // whenever one of the years (from,to) change, update the filtered data\n        Observable.combineLatest(this.yearFrom.valueChanges, this.yearTo.valueChanges)\n          .debounceTime(50)\n          .subscribe(yearRange => {\n            let from:number = yearRange[0];\n            let to:number = yearRange[1];\n            this.filteredData = this.data.filter(dataPoint => dataPoint.date.getUTCFullYear() >= from && dataPoint.date.getUTCFullYear() <= to);\n          });\n\n        // set initial values to first and last available year\n        this.showAllData();\n      });\n  }\n\n  /**\n   * Sets the filters for year from and year to such that all data is shown.\n   */\n  showAllData() {\n    if (!this.years)\n      return;\n    \n    this.yearFrom.updateValue(this.years[0]);\n    this.yearTo.updateValue(this.years[this.years.length-1]);\n  }\n\n}\n"]}